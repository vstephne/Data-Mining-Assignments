# -*- coding: utf-8 -*-
"""HW3-Part1-Iris-Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18xcldKZw6IBFVjJWU_8S-7PLUU74ooeK

**Iris DatasetClustering using KMeans**

**Importing Dataset**
"""

file = open('/content/1632506309_3197203_iris_new_data_test.csv')
lines = file.readlines()
lines

sepal_length =[]
sepal_width = []
petal_length = []
petal_width =[]

#spliting data based on \n
for l in lines:
  l = l.replace('\n', '')
  split_val = l.split(' ')
  sepal_length.append(float(split_val[0]))
  sepal_width.append(float(split_val[1]))
  petal_length.append(float(split_val[2]))
  petal_width.append(float(split_val[3]))

#adding column headings
data = {"sepal_length":sepal_length,"sepal_width":sepal_width,"petal_length":petal_length,"petal_width":petal_width}

import pandas as pd

df = pd.DataFrame.from_dict(data)

"""**Applying KMeans**"""

import numpy as np
from scipy.spatial import distance


def kmeans(data,k, max_iter = 300):

  k_points = np.random.choice(len(data), k, replace=False) #choosing random centroids
  centroids = data.iloc[k_points, :]
  distances = distance.cdist(data, centroids ,'cosine')
  points = np.array([np.argmin(i) for i in distances])
  for _ in range(max_iter):
    centroids = []
    for i in range(k):
      temp_cent = data.iloc[points==i].mean(axis=0)
      centroids.append(temp_cent)

    centroids = np.vstack(centroids)
    distances = distance.cdist(data, centroids ,'cosine')
    points = np.array([np.argmin(i) for i in distances])  
  return points

#saving output
f=open('./HW3_part1_output.txt', 'w') 
f.writelines("%s \n"%i for i in kmeans(df,3,50))
f.close()

output = kmeans(df,3,50)
df["result"] = output
import seaborn as sns

sns.FacetGrid(df,hue="result",size=3).map(sns.distplot,"petal_length").add_legend()
sns.FacetGrid(df,hue="result",size=3).map(sns.distplot,"petal_width").add_legend()
sns.FacetGrid(df,hue="result",size=3).map(sns.distplot,"sepal_length").add_legend()
plt.show()

sns.boxplot(x="result",y="petal_length",data=df)
plt.show()

sns.violinplot(x="result",y="petal_length",data=df)
plt.show()

